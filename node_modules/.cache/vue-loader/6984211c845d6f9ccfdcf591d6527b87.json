{"remainingRequest":"/Users/unlogic/innerServices/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/unlogic/innerServices/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/unlogic/innerServices/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/unlogic/innerServices/src/views/Dashboard.vue?vue&type=template&id=22ba47ca&","dependencies":[{"path":"/Users/unlogic/innerServices/src/views/Dashboard.vue","mtime":1579704872554},{"path":"/Users/unlogic/innerServices/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/unlogic/innerServices/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/unlogic/innerServices/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/unlogic/innerServices/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}